#!/usr/bin/env sbcl --script


;;; initialize

;; quicklisp
(let ((quicklisp-init (merge-pathnames ".quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; asdf
(setf asdf:*central-registry* '(*default-pathname-defaults*))


;;; require

(require 'gsl)


;;; function

(defun print-float-elms (lst)
  (mapcar #'(lambda (x) (format t "~,8f~%" x)) lst))

(defun print-int-elms (lst)
  (mapcar #'(lambda (x) (format t "~d~%" x)) lst))

(defun parse-argv (argv)
  (mapcar #'(lambda (x) (read-from-string x)) argv))


;;; main

(if (> (length sb-ext:*posix-argv*) 1)
    (let ((dist (nth 1 sb-ext:*posix-argv*))
          (rng (gsl:rng-alloc)))
      (cond
        ((string= dist "uniform")
         (print-float-elms (apply #'gsl:rng-uniform
                                  `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        ((string= dist "uniform-pos")
         (print-float-elms (apply #'gsl:rng-uniform-pos
                                  `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        ((string= dist "uniform-int")
         (print-int-elms (apply #'gsl:rng-uniform-int
                                `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        ((string= dist "gaussian")
         (print-float-elms (apply #'gsl:ran-gaussian
                                  `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        ((string= dist "ugaussian")
         (print-float-elms (apply #'gsl:ran-ugaussian
                                  `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        ((string= dist "poisson")
         (print-int-elms (apply #'gsl:ran-poisson
                                `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        ((string= dist "bernoulli")
         (print-int-elms (apply #'gsl:ran-bernoulli
                                `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        ((string= dist "binomial")
         (print-int-elms (apply #'gsl:ran-binomial
                                `(,rng ,@(parse-argv (cddr sb-ext:*posix-argv*))))))
        (t
         (princ "unsupported distribution")))
      (gsl:rng-free rng))
    (princ "invalid argument"))
