;;;; gsl/rng-type.lisp
;;;;
;;;; The library provides a large collection of random number
;;;; generations which can be accessed through a uniform
;;;; interface. Environment variables allow you to select different
;;;; generators and seeds at runtime, so that you can easily switch
;;;; between generators without needing to recompile your program.

;;;; Copyright (C) 2016, 2017 Takahiro Ishikawa
;;;;
;;;; This program is free software: you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation, either version 3 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program. If not, see http://www.gnu.org/licenses/.

(cl:in-package "GSL")


;;; rng

(defclass rng ()
  ((pointer :accessor pointer :initarg :pointer)))

(defvar *rng-default* gsl_rng_default
  "Available gsl_rng_type:
  gsl::gsl_rng_borosh13
  gsl::gsl_rng_coveyou
  gsl::gsl_rng_cmrg
  gsl::gsl_rng_fishman18
  gsl::gsl_rng_fishman20
  gsl::gsl_rng_fishman2x
  gsl::gsl_rng_gfsr4
  gsl::gsl_rng_knuthran
  gsl::gsl_rng_knuthran2
  gsl::gsl_rng_knuthran2002
  gsl::gsl_rng_lecuyer21
  gsl::gsl_rng_minstd
  gsl::gsl_rng_mrg
  gsl::gsl_rng_mt19937 (default)
  gsl::gsl_rng_mt19937_1999
  gsl::gsl_rng_mt19937_1998
  gsl::gsl_rng_r250
  gsl::gsl_rng_ran0
  gsl::gsl_rng_ran1
  gsl::gsl_rng_ran2
  gsl::gsl_rng_ran3
  gsl::gsl_rng_rand
  gsl::gsl_rng_rand48
  gsl::gsl_rng_random128_bsd
  gsl::gsl_rng_random128_glibc2
  gsl::gsl_rng_random128_libc5
  gsl::gsl_rng_random256_bsd
  gsl::gsl_rng_random256_glibc2
  gsl::gsl_rng_random256_libc5
  gsl::gsl_rng_random32_bsd
  gsl::gsl_rng_random32_glibc2
  gsl::gsl_rng_random32_libc5
  gsl::gsl_rng_random64_bsd
  gsl::gsl_rng_random64_glibc2
  gsl::gsl_rng_random64_libc5
  gsl::gsl_rng_random8_bsd
  gsl::gsl_rng_random8_glibc2
  gsl::gsl_rng_random8_libc5
  gsl::gsl_rng_random_bsd
  gsl::gsl_rng_random_glibc2
  gsl::gsl_rng_random_libc5
  gsl::gsl_rng_randu
  gsl::gsl_rng_ranf
  gsl::gsl_rng_ranlux
  gsl::gsl_rng_ranlux389
  gsl::gsl_rng_ranlxd1
  gsl::gsl_rng_ranlxd2
  gsl::gsl_rng_ranlxs0
  gsl::gsl_rng_ranlxs1
  gsl::gsl_rng_ranlxs2
  gsl::gsl_rng_ranmar
  gsl::gsl_rng_slatec
  gsl::gsl_rng_taus
  gsl::gsl_rng_taus2
  gsl::gsl_rng_taus113
  gsl::gsl_rng_transputer
  gsl::gsl_rng_tt800
  gsl::gsl_rng_uni
  gsl::gsl_rng_uni32
  gsl::gsl_rng_vax
  gsl::gsl_rng_waterman14
  gsl::gsl_rng_zuf")

(defvar *rng-default-seed* gsl_rng_default_seed
  "Default seed is 0.")

(defun rng-alloc (&optional (type *rng-default*) (seed *rng-default-seed*))
  "This function returns a pointer to a newly-created instance of a
random number generator of type type."
  (let ((rng (make-instance 'rng :pointer (gsl_rng_alloc type))))
    (gsl_rng_set (pointer rng) seed)
    rng))

(defun rng-set (rng seed)
  "This function initialized (or 'seeds') the random number
generator. If the generator is seeded with the same value of s on two
different runs, the same stream of random numbers will be generated by
successive calls to the routines below. If different values of s >= 1
are supplied, then the generated streams of random numbers should be
completely different. If the seed s is zero then the standard seed
from the original implementation is used instead."
  (gsl_rng_set
   (pointer rng)
   (coerce seed `(unsigned-byte
                  ,(* (cffi:foreign-type-size :unsigned-long) 8))))
  rng)

(defun rng-free (rng &optional (result nil))
  "This function frees all the memory associated with the generator
rng."
  (gsl_rng_free (pointer rng))
  result)

(defmacro with-rng ((var &rest rng-alloc-args) &body body)
  `(let ((,var (rng-alloc ,@rng-alloc-args)))
     (unwind-protect (progn ,@body)
       (rng-free ,var))))
